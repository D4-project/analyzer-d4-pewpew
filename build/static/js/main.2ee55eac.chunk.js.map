{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["COUNTRIES","window","location","D4","App","props","_onViewportChange","viewport","setState","state","_resize","width","innerWidth","height","innerHeight","longitude","latitude","zoom","maxZoom","points","_getData","bind","_processData","loc","up","this","uri","protocol","host","pathname","ws","WebSocket","onopen","console","log","onmessage","ev","json","JSON","parse","data","push","addEventListener","reduce","accu","curr","position","Number","geoip_lon","geoip_lat","removeEventListener","controller","initialViewState","id","stroked","filled","lineWidthMinPixels","opacity","getLineColor","getFillColor","getSourcePosition","f","getTargetPosition","getSourceColor","getTargetColor","getWidth","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gUAMMA,EAAYC,OAAOC,SAAW,wCAC9BC,EAAK,GAEUC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAoERC,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CACZD,SAAS,2BAAM,EAAKE,MAAMF,UAAaA,MAvExB,EA2EnBG,QAAU,WACR,EAAKJ,kBAAkB,CACrBK,MAAOV,OAAOW,WACdC,OAAQZ,OAAOa,eA5EjB,EAAKL,MAAQ,CACXF,SAAU,CACRI,MAAOV,OAAOW,WACdC,OAAQZ,OAAOa,YACfC,UAAW,UACXC,SAAU,UACVC,KAAM,EACNC,QAAS,IAEXC,OAAQ,IAEV,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAdH,E,uDAkBjB,IAAIE,EAAMtB,OAAOC,SAEbsB,EAAKC,KACLC,EAAM,MAEW,WAAjBH,EAAII,WACND,EAAM,QAERA,GAAO,KAAOH,EAAIK,KAClBF,GAAOH,EAAIM,SAAW,KAEtB,IAAIC,EAAK,IAAIC,UAAUL,GAEvBI,EAAGE,OAAS,WACVC,QAAQC,IAAI,cAGdJ,EAAGK,UAAY,SAASC,GACtB,IAAIC,EAAOC,KAAKC,MAAMH,EAAGI,MACzBrC,EAAGsC,KAAKJ,EAAK,IACbb,EAAGF,kB,0CAKLG,KAAKL,WACLK,KAAKH,eACLrB,OAAOyC,iBAAiB,SAAUjB,KAAKf,SACvCe,KAAKf,Y,qCAIL,GAAIP,EAAI,CACN8B,QAAQC,IAAI/B,GACZ,IAAMgB,EAAShB,EAAGwC,QAAO,SAACC,EAAMC,GAK9B,OAJAZ,QAAQC,IAAIW,GACZD,EAAKH,KAAK,CACRK,SAAU,CAACC,OAAOF,EAAKG,WAAYD,OAAOF,EAAKI,cAE1CL,IACN,IACHnB,KAAKjB,SAAS,CACZW,c,6CAMJlB,OAAOiD,oBAAoB,SAAUzB,KAAKf,W,+BAiB1C,OACA,kBAAC,IAAD,CAAQyC,YAAY,EAAMC,iBAAkB3B,KAAKhB,MAAMF,UACrD,kBAAC,IAAD,CACE8C,GAAG,WACHb,KAAMxC,EACNsD,SAAS,EACTC,QAAQ,EACRC,mBAAoB,EACpBC,QAAS,GACTC,aAAc,CAAC,GAAI,GAAI,IACvBC,aAAc,CAAC,IAAK,IAAK,OAE3B,kBAAC,IAAD,CACEN,GAAG,OACHb,KAAMf,KAAKhB,MAAMU,OACjByC,kBAAmB,SAAAC,GAAC,MAAI,CAAC,UAAW,YACpCC,kBAAmB,SAAAD,GAAC,OAAIA,EAAEf,UAC1BiB,eAAgB,CAAC,EAAG,IAAK,KACzBC,eAAgB,CAAC,IAAK,EAAG,IACzBC,SAAU,S,GAvGeC,aCGbC,QACW,cAA7BlE,OAAOC,SAASkE,UAEe,UAA7BnE,OAAOC,SAASkE,UAEhBnE,OAAOC,SAASkE,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.2ee55eac.chunk.js","sourcesContent":["/* global window */\nimport React, { Component } from 'react';\nimport DeckGL, {GeoJsonLayer, ArcLayer} from 'deck.gl';\n\n// const COUNTRIES =\n  // 'https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_50m_admin_0_scale_rank.geojson'; //eslint-disable-line\nconst COUNTRIES = window.location + 'map/ne_50m_admin_0_scale_rank.geojson' ;\nconst D4 = [];\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      viewport: {\n        width: window.innerWidth,\n        height: window.innerHeight,\n        longitude: 6.1319346,\n        latitude: 49.611621,\n        zoom: 4,\n        maxZoom: 12\n      },\n      points: []\n    };\n    this._getData = this._getData.bind(this);\n    this._processData = this._processData.bind(this);\n  }\n\n  _getData() {\n    var loc = window.location;\n    // js binding \n    var up = this;\n    var uri = 'ws:';\n\n    if (loc.protocol === 'https:') {\n      uri = 'wss:';\n    }\n    uri += '//' + loc.host;\n    uri += loc.pathname + 'ws';\n\n    var ws = new WebSocket(uri)\n\n    ws.onopen = function() {\n      console.log('Connected')\n    }\n\n    ws.onmessage = function(ev){\n      var json = JSON.parse(ev.data);\n      D4.push(json[0]);\n      up._processData();\n    }\n  }\n\n  componentDidMount() {\n    this._getData();\n    this._processData();\n    window.addEventListener('resize', this._resize);\n    this._resize();\n  }\n\n  _processData() {\n    if (D4) {\n      console.log(D4);\n      const points = D4.reduce((accu, curr) => {\n        console.log(curr)\n        accu.push({\n          position: [Number(curr.geoip_lon), Number(curr.geoip_lat)],\n        });\n        return accu;\n      }, []);\n      this.setState({\n        points,\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this._resize);\n  }\n\n  _onViewportChange = (viewport) => {\n    this.setState({\n      viewport: { ...this.state.viewport, ...viewport }\n    });\n  }\n\n  _resize = () => {\n    this._onViewportChange({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  }\n\n  render() {\n    return (\n    <DeckGL controller={true} initialViewState={this.state.viewport}>\n      <GeoJsonLayer\n        id=\"base-map\"\n        data={COUNTRIES}\n        stroked={true}\n        filled={true}\n        lineWidthMinPixels={2}\n        opacity={0.4}\n        getLineColor={[60, 60, 60]}\n        getFillColor={[200, 200, 200]}\n      />\n      <ArcLayer\n        id=\"arcs\"\n        data={this.state.points}\n        getSourcePosition={f => [6.1319346, 49.611621]}\n        getTargetPosition={f => f.position} \n        getSourceColor={[0, 128, 200]}\n        getTargetColor={[200, 0, 80]}\n        getWidth={1}\n      />\n    </DeckGL>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}